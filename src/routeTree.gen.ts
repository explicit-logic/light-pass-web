/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StartImport } from './routes/start'
import { Route as CompletionImport } from './routes/completion'
import { Route as IndexImport } from './routes/index'
import { Route as QuizPageIdImport } from './routes/quiz.$pageId'

// Create/Update Routes

const StartRoute = StartImport.update({
  id: '/start',
  path: '/start',
  getParentRoute: () => rootRoute,
} as any)

const CompletionRoute = CompletionImport.update({
  id: '/completion',
  path: '/completion',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const QuizPageIdRoute = QuizPageIdImport.update({
  id: '/quiz/$pageId',
  path: '/quiz/$pageId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/completion': {
      id: '/completion'
      path: '/completion'
      fullPath: '/completion'
      preLoaderRoute: typeof CompletionImport
      parentRoute: typeof rootRoute
    }
    '/start': {
      id: '/start'
      path: '/start'
      fullPath: '/start'
      preLoaderRoute: typeof StartImport
      parentRoute: typeof rootRoute
    }
    '/quiz/$pageId': {
      id: '/quiz/$pageId'
      path: '/quiz/$pageId'
      fullPath: '/quiz/$pageId'
      preLoaderRoute: typeof QuizPageIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/completion': typeof CompletionRoute
  '/start': typeof StartRoute
  '/quiz/$pageId': typeof QuizPageIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/completion': typeof CompletionRoute
  '/start': typeof StartRoute
  '/quiz/$pageId': typeof QuizPageIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/completion': typeof CompletionRoute
  '/start': typeof StartRoute
  '/quiz/$pageId': typeof QuizPageIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/completion' | '/start' | '/quiz/$pageId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/completion' | '/start' | '/quiz/$pageId'
  id: '__root__' | '/' | '/completion' | '/start' | '/quiz/$pageId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CompletionRoute: typeof CompletionRoute
  StartRoute: typeof StartRoute
  QuizPageIdRoute: typeof QuizPageIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CompletionRoute: CompletionRoute,
  StartRoute: StartRoute,
  QuizPageIdRoute: QuizPageIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/completion",
        "/start",
        "/quiz/$pageId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/completion": {
      "filePath": "completion.tsx"
    },
    "/start": {
      "filePath": "start.tsx"
    },
    "/quiz/$pageId": {
      "filePath": "quiz.$pageId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
