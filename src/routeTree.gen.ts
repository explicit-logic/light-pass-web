/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CompletionImport } from './routes/completion'
import { Route as IndexImport } from './routes/index'
import { Route as QuizQuestionIdImport } from './routes/quiz.$questionId'

// Create/Update Routes

const CompletionRoute = CompletionImport.update({
  id: '/completion',
  path: '/completion',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const QuizQuestionIdRoute = QuizQuestionIdImport.update({
  id: '/quiz/$questionId',
  path: '/quiz/$questionId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/completion': {
      id: '/completion'
      path: '/completion'
      fullPath: '/completion'
      preLoaderRoute: typeof CompletionImport
      parentRoute: typeof rootRoute
    }
    '/quiz/$questionId': {
      id: '/quiz/$questionId'
      path: '/quiz/$questionId'
      fullPath: '/quiz/$questionId'
      preLoaderRoute: typeof QuizQuestionIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/completion': typeof CompletionRoute
  '/quiz/$questionId': typeof QuizQuestionIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/completion': typeof CompletionRoute
  '/quiz/$questionId': typeof QuizQuestionIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/completion': typeof CompletionRoute
  '/quiz/$questionId': typeof QuizQuestionIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/completion' | '/quiz/$questionId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/completion' | '/quiz/$questionId'
  id: '__root__' | '/' | '/completion' | '/quiz/$questionId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CompletionRoute: typeof CompletionRoute
  QuizQuestionIdRoute: typeof QuizQuestionIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CompletionRoute: CompletionRoute,
  QuizQuestionIdRoute: QuizQuestionIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/completion",
        "/quiz/$questionId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/completion": {
      "filePath": "completion.tsx"
    },
    "/quiz/$questionId": {
      "filePath": "quiz.$questionId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
